services:
  # Gateway: Kong
  kong:
    image: kong:latest
    environment:
      KONG_DATABASE: off
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
    volumes:
      - ./gateway/kong.yml:/usr/local/kong/declarative/kong.yml
    ports:
      - "8000:8000"    # Proxy
      - "8443:8443"    # Proxy SSL
      - "8001:8001"    # Admin API
      - "8444:8444"    # Admin API SSL
    depends_on:
      - nginx

  # Nginx ingress (acts as web server / static assets)
  nginx:
    image: nginx:latest
    volumes:
      - ./gateway/nginx_config.conf:/etc/nginx/nginx.conf
      - ./frontend/dist:/usr/share/nginx/html
    ports:
      - "80:80"
    depends_on:
      - frontend

  # PostgreSQL (single shared DB cluster for all microservices)
  postgres:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: eportal_user
      POSTGRES_PASSWORD: eportal_pass
      POSTGRES_DB: eportal_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Redis
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT


  # Microservices using unified Dockerfile
  case_service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_TYPE: backend
        SERVICE_NAME: case_service
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgres://eportal_user:eportal_pass@postgres:5432/eportal_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
      - kafka

  notification_service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_TYPE: backend
        SERVICE_NAME: notification_service
    ports:
      - "8002:8000"
    environment:
      - DATABASE_URL=postgres://eportal_user:eportal_pass@postgres:5432/eportal_db
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka

  payment_service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_TYPE: backend
        SERVICE_NAME: payment_service
    ports:
      - "8003:8000"
    environment:
      - DATABASE_URL=postgres://eportal_user:eportal_pass@postgres:5432/eportal_db
    depends_on:
      - postgres

  schedule_service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_TYPE: backend
        SERVICE_NAME: schedule_service
    ports:
      - "8004:8000"
    environment:
      - DATABASE_URL=postgres://eportal_user:eportal_pass@postgres:5432/eportal_db
    depends_on:
      - postgres

  video_service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_TYPE: backend
        SERVICE_NAME: video_service
    ports:
      - "8006:8000"
    environment:
      - DATABASE_URL=postgres://eportal_user:eportal_pass@postgres:5432/eportal_db
    depends_on:
      - postgres

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_TYPE: frontend
    ports:
      - "5173:5173"
    depends_on:
      - case_service

volumes:
  postgres_data: